/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package ru.darlz.ff.service;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

public class Story implements TBase<Story, Story._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("Story");

    private static final TField STORY_ID_FIELD_DESC = new TField("storyId", TType.I32, (short) 1);
    private static final TField AUTHOR_ID_FIELD_DESC = new TField("authorId", TType.I64, (short) 2);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 3);
    private static final TField BODY_FIELD_DESC = new TField("body", TType.STRING, (short) 4);
    private static final TField DATE_FIELD_DESC = new TField("date", TType.STRING, (short) 5);
    private static final TField LIKED_BY_FIELD_DESC = new TField("likedBy", TType.I32, (short) 6);
    private static final TField LIKED_FIELD_DESC = new TField("liked", TType.BOOL, (short) 7);

    public int storyId;
    public long authorId;
    public String description;
    public String body;
    public String date;
    public int likedBy;
    public boolean liked;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        STORY_ID((short) 1, "storyId"),
        AUTHOR_ID((short) 2, "authorId"),
        DESCRIPTION((short) 3, "description"),
        BODY((short) 4, "body"),
        DATE((short) 5, "date"),
        LIKED_BY((short) 6, "likedBy"),
        LIKED((short) 7, "liked");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // STORY_ID
                    return STORY_ID;
                case 2: // AUTHOR_ID
                    return AUTHOR_ID;
                case 3: // DESCRIPTION
                    return DESCRIPTION;
                case 4: // BODY
                    return BODY;
                case 5: // DATE
                    return DATE;
                case 6: // LIKED_BY
                    return LIKED_BY;
                case 7: // LIKED
                    return LIKED;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __STORYID_ISSET_ID = 0;
    private static final int __AUTHORID_ISSET_ID = 1;
    private static final int __LIKEDBY_ISSET_ID = 2;
    private static final int __LIKED_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, FieldMetaData> metaDataMap;

    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.STORY_ID, new FieldMetaData("storyId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.AUTHOR_ID, new FieldMetaData("authorId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I64)));
        tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.BODY, new FieldMetaData("body", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.DATE, new FieldMetaData("date", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.LIKED_BY, new FieldMetaData("likedBy", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.LIKED, new FieldMetaData("liked", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.BOOL)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(Story.class, metaDataMap);
    }

    public Story() {
    }

    public Story(
            int storyId,
            long authorId,
            String description,
            String body,
            String date,
            int likedBy,
            boolean liked) {
        this();
        this.storyId = storyId;
        setStoryIdIsSet(true);
        this.authorId = authorId;
        setAuthorIdIsSet(true);
        this.description = description;
        this.body = body;
        this.date = date;
        this.likedBy = likedBy;
        setLikedByIsSet(true);
        this.liked = liked;
        setLikedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Story(Story other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.storyId = other.storyId;
        this.authorId = other.authorId;
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetBody()) {
            this.body = other.body;
        }
        if (other.isSetDate()) {
            this.date = other.date;
        }
        this.likedBy = other.likedBy;
        this.liked = other.liked;
    }

    public Story deepCopy() {
        return new Story(this);
    }

    @Override
    public void clear() {
        setStoryIdIsSet(false);
        this.storyId = 0;
        setAuthorIdIsSet(false);
        this.authorId = 0;
        this.description = null;
        this.body = null;
        this.date = null;
        setLikedByIsSet(false);
        this.likedBy = 0;
        setLikedIsSet(false);
        this.liked = false;
    }

    public int getStoryId() {
        return this.storyId;
    }

    public Story setStoryId(int storyId) {
        this.storyId = storyId;
        setStoryIdIsSet(true);
        return this;
    }

    public void unsetStoryId() {
        __isset_bit_vector.clear(__STORYID_ISSET_ID);
    }

    /**
     * Returns true if field storyId is set (has been asigned a value) and false otherwise
     */
    public boolean isSetStoryId() {
        return __isset_bit_vector.get(__STORYID_ISSET_ID);
    }

    public void setStoryIdIsSet(boolean value) {
        __isset_bit_vector.set(__STORYID_ISSET_ID, value);
    }

    public long getAuthorId() {
        return this.authorId;
    }

    public Story setAuthorId(long authorId) {
        this.authorId = authorId;
        setAuthorIdIsSet(true);
        return this;
    }

    public void unsetAuthorId() {
        __isset_bit_vector.clear(__AUTHORID_ISSET_ID);
    }

    /**
     * Returns true if field authorId is set (has been asigned a value) and false otherwise
     */
    public boolean isSetAuthorId() {
        return __isset_bit_vector.get(__AUTHORID_ISSET_ID);
    }

    public void setAuthorIdIsSet(boolean value) {
        __isset_bit_vector.set(__AUTHORID_ISSET_ID, value);
    }

    public String getDescription() {
        return this.description;
    }

    public Story setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /**
     * Returns true if field description is set (has been asigned a value) and false otherwise
     */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    public String getBody() {
        return this.body;
    }

    public Story setBody(String body) {
        this.body = body;
        return this;
    }

    public void unsetBody() {
        this.body = null;
    }

    /**
     * Returns true if field body is set (has been asigned a value) and false otherwise
     */
    public boolean isSetBody() {
        return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
        if (!value) {
            this.body = null;
        }
    }

    public String getDate() {
        return this.date;
    }

    public Story setDate(String date) {
        this.date = date;
        return this;
    }

    public void unsetDate() {
        this.date = null;
    }

    /**
     * Returns true if field date is set (has been asigned a value) and false otherwise
     */
    public boolean isSetDate() {
        return this.date != null;
    }

    public void setDateIsSet(boolean value) {
        if (!value) {
            this.date = null;
        }
    }

    public int getLikedBy() {
        return this.likedBy;
    }

    public Story setLikedBy(int likedBy) {
        this.likedBy = likedBy;
        setLikedByIsSet(true);
        return this;
    }

    public void unsetLikedBy() {
        __isset_bit_vector.clear(__LIKEDBY_ISSET_ID);
    }

    /**
     * Returns true if field likedBy is set (has been asigned a value) and false otherwise
     */
    public boolean isSetLikedBy() {
        return __isset_bit_vector.get(__LIKEDBY_ISSET_ID);
    }

    public void setLikedByIsSet(boolean value) {
        __isset_bit_vector.set(__LIKEDBY_ISSET_ID, value);
    }

    public boolean isLiked() {
        return this.liked;
    }

    public Story setLiked(boolean liked) {
        this.liked = liked;
        setLikedIsSet(true);
        return this;
    }

    public void unsetLiked() {
        __isset_bit_vector.clear(__LIKED_ISSET_ID);
    }

    /**
     * Returns true if field liked is set (has been asigned a value) and false otherwise
     */
    public boolean isSetLiked() {
        return __isset_bit_vector.get(__LIKED_ISSET_ID);
    }

    public void setLikedIsSet(boolean value) {
        __isset_bit_vector.set(__LIKED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case STORY_ID:
                if (value == null) {
                    unsetStoryId();
                } else {
                    setStoryId((Integer) value);
                }
                break;

            case AUTHOR_ID:
                if (value == null) {
                    unsetAuthorId();
                } else {
                    setAuthorId((Long) value);
                }
                break;

            case DESCRIPTION:
                if (value == null) {
                    unsetDescription();
                } else {
                    setDescription((String) value);
                }
                break;

            case BODY:
                if (value == null) {
                    unsetBody();
                } else {
                    setBody((String) value);
                }
                break;

            case DATE:
                if (value == null) {
                    unsetDate();
                } else {
                    setDate((String) value);
                }
                break;

            case LIKED_BY:
                if (value == null) {
                    unsetLikedBy();
                } else {
                    setLikedBy((Integer) value);
                }
                break;

            case LIKED:
                if (value == null) {
                    unsetLiked();
                } else {
                    setLiked((Boolean) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case STORY_ID:
                return new Integer(getStoryId());

            case AUTHOR_ID:
                return new Long(getAuthorId());

            case DESCRIPTION:
                return getDescription();

            case BODY:
                return getBody();

            case DATE:
                return getDate();

            case LIKED_BY:
                return new Integer(getLikedBy());

            case LIKED:
                return new Boolean(isLiked());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case STORY_ID:
                return isSetStoryId();
            case AUTHOR_ID:
                return isSetAuthorId();
            case DESCRIPTION:
                return isSetDescription();
            case BODY:
                return isSetBody();
            case DATE:
                return isSetDate();
            case LIKED_BY:
                return isSetLikedBy();
            case LIKED:
                return isSetLiked();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Story)
            return this.equals((Story) that);
        return false;
    }

    public boolean equals(Story that) {
        if (that == null)
            return false;

        boolean this_present_storyId = true;
        boolean that_present_storyId = true;
        if (this_present_storyId || that_present_storyId) {
            if (!(this_present_storyId && that_present_storyId))
                return false;
            if (this.storyId != that.storyId)
                return false;
        }

        boolean this_present_authorId = true;
        boolean that_present_authorId = true;
        if (this_present_authorId || that_present_authorId) {
            if (!(this_present_authorId && that_present_authorId))
                return false;
            if (this.authorId != that.authorId)
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_body = true && this.isSetBody();
        boolean that_present_body = true && that.isSetBody();
        if (this_present_body || that_present_body) {
            if (!(this_present_body && that_present_body))
                return false;
            if (!this.body.equals(that.body))
                return false;
        }

        boolean this_present_date = true && this.isSetDate();
        boolean that_present_date = true && that.isSetDate();
        if (this_present_date || that_present_date) {
            if (!(this_present_date && that_present_date))
                return false;
            if (!this.date.equals(that.date))
                return false;
        }

        boolean this_present_likedBy = true;
        boolean that_present_likedBy = true;
        if (this_present_likedBy || that_present_likedBy) {
            if (!(this_present_likedBy && that_present_likedBy))
                return false;
            if (this.likedBy != that.likedBy)
                return false;
        }

        boolean this_present_liked = true;
        boolean that_present_liked = true;
        if (this_present_liked || that_present_liked) {
            if (!(this_present_liked && that_present_liked))
                return false;
            if (this.liked != that.liked)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(Story other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        Story typedOther = (Story) other;

        lastComparison = Boolean.valueOf(isSetStoryId()).compareTo(typedOther.isSetStoryId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStoryId()) {
            lastComparison = TBaseHelper.compareTo(this.storyId, typedOther.storyId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(typedOther.isSetAuthorId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAuthorId()) {
            lastComparison = TBaseHelper.compareTo(this.authorId, typedOther.authorId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBody()).compareTo(typedOther.isSetBody());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBody()) {
            lastComparison = TBaseHelper.compareTo(this.body, typedOther.body);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDate()) {
            lastComparison = TBaseHelper.compareTo(this.date, typedOther.date);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLikedBy()).compareTo(typedOther.isSetLikedBy());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLikedBy()) {
            lastComparison = TBaseHelper.compareTo(this.likedBy, typedOther.likedBy);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLiked()).compareTo(typedOther.isSetLiked());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLiked()) {
            lastComparison = TBaseHelper.compareTo(this.liked, typedOther.liked);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // STORY_ID
                    if (field.type == TType.I32) {
                        this.storyId = iprot.readI32();
                        setStoryIdIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // AUTHOR_ID
                    if (field.type == TType.I64) {
                        this.authorId = iprot.readI64();
                        setAuthorIdIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // DESCRIPTION
                    if (field.type == TType.STRING) {
                        this.description = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // BODY
                    if (field.type == TType.STRING) {
                        this.body = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // DATE
                    if (field.type == TType.STRING) {
                        this.date = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 6: // LIKED_BY
                    if (field.type == TType.I32) {
                        this.likedBy = iprot.readI32();
                        setLikedByIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 7: // LIKED
                    if (field.type == TType.BOOL) {
                        this.liked = iprot.readBool();
                        setLikedIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STORY_ID_FIELD_DESC);
        oprot.writeI32(this.storyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
        oprot.writeI64(this.authorId);
        oprot.writeFieldEnd();
        if (this.description != null) {
            oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
            oprot.writeString(this.description);
            oprot.writeFieldEnd();
        }
        if (this.body != null) {
            oprot.writeFieldBegin(BODY_FIELD_DESC);
            oprot.writeString(this.body);
            oprot.writeFieldEnd();
        }
        if (this.date != null) {
            oprot.writeFieldBegin(DATE_FIELD_DESC);
            oprot.writeString(this.date);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIKED_BY_FIELD_DESC);
        oprot.writeI32(this.likedBy);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIKED_FIELD_DESC);
        oprot.writeBool(this.liked);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Story(");
        boolean first = true;

        sb.append("storyId:");
        sb.append(this.storyId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("authorId:");
        sb.append(this.authorId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("body:");
        if (this.body == null) {
            sb.append("null");
        } else {
            sb.append(this.body);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("date:");
        if (this.date == null) {
            sb.append("null");
        } else {
            sb.append(this.date);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("likedBy:");
        sb.append(this.likedBy);
        first = false;
        if (!first) sb.append(", ");
        sb.append("liked:");
        sb.append(this.liked);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

