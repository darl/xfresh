/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package ru.darlz.ff.service;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingTransport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class ThriftService {

    public interface Iface {

        public void addStory(long myId, String description, String body) throws TException;

        public List<Story> getStories(long userId, boolean best, int page, long myId) throws TException;

        public List<Story> getLiked(long userId, boolean best, int page, long myId) throws TException;

        public void likeIt(long myId, int storyId) throws TException;

        public Story getStory(int storyId, long myId) throws TException;

        public List<Long> likedBy(int storyId) throws TException;

    }

    public interface AsyncIface {

        public void addStory(long myId, String description, String body, AsyncMethodCallback<AsyncClient.addStory_call> resultHandler) throws TException;

        public void getStories(long userId, boolean best, int page, long myId, AsyncMethodCallback<AsyncClient.getStories_call> resultHandler) throws TException;

        public void getLiked(long userId, boolean best, int page, long myId, AsyncMethodCallback<AsyncClient.getLiked_call> resultHandler) throws TException;

        public void likeIt(long myId, int storyId, AsyncMethodCallback<AsyncClient.likeIt_call> resultHandler) throws TException;

        public void getStory(int storyId, long myId, AsyncMethodCallback<AsyncClient.getStory_call> resultHandler) throws TException;

        public void likedBy(int storyId, AsyncMethodCallback<AsyncClient.likedBy_call> resultHandler) throws TException;

    }

    public static class Client implements TServiceClient, Iface {
        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(TProtocol prot) {
            this(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot) {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;

        protected int seqid_;

        public TProtocol getInputProtocol() {
            return this.iprot_;
        }

        public TProtocol getOutputProtocol() {
            return this.oprot_;
        }

        public void addStory(long myId, String description, String body) throws TException {
            send_addStory(myId, description, body);
            recv_addStory();
        }

        public void send_addStory(long myId, String description, String body) throws TException {
            oprot_.writeMessageBegin(new TMessage("addStory", TMessageType.CALL, ++seqid_));
            addStory_args args = new addStory_args();
            args.setMyId(myId);
            args.setDescription(description);
            args.setBody(body);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public void recv_addStory() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addStory failed: out of sequence response");
            }
            addStory_result result = new addStory_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            return;
        }

        public List<Story> getStories(long userId, boolean best, int page, long myId) throws TException {
            send_getStories(userId, best, page, myId);
            return recv_getStories();
        }

        public void send_getStories(long userId, boolean best, int page, long myId) throws TException {
            oprot_.writeMessageBegin(new TMessage("getStories", TMessageType.CALL, ++seqid_));
            getStories_args args = new getStories_args();
            args.setUserId(userId);
            args.setBest(best);
            args.setPage(page);
            args.setMyId(myId);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public List<Story> recv_getStories() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStories failed: out of sequence response");
            }
            getStories_result result = new getStories_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStories failed: unknown result");
        }

        public List<Story> getLiked(long userId, boolean best, int page, long myId) throws TException {
            send_getLiked(userId, best, page, myId);
            return recv_getLiked();
        }

        public void send_getLiked(long userId, boolean best, int page, long myId) throws TException {
            oprot_.writeMessageBegin(new TMessage("getLiked", TMessageType.CALL, ++seqid_));
            getLiked_args args = new getLiked_args();
            args.setUserId(userId);
            args.setBest(best);
            args.setPage(page);
            args.setMyId(myId);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public List<Story> recv_getLiked() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLiked failed: out of sequence response");
            }
            getLiked_result result = new getLiked_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLiked failed: unknown result");
        }

        public void likeIt(long myId, int storyId) throws TException {
            send_likeIt(myId, storyId);
            recv_likeIt();
        }

        public void send_likeIt(long myId, int storyId) throws TException {
            oprot_.writeMessageBegin(new TMessage("likeIt", TMessageType.CALL, ++seqid_));
            likeIt_args args = new likeIt_args();
            args.setMyId(myId);
            args.setStoryId(storyId);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public void recv_likeIt() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "likeIt failed: out of sequence response");
            }
            likeIt_result result = new likeIt_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            return;
        }

        public Story getStory(int storyId, long myId) throws TException {
            send_getStory(storyId, myId);
            return recv_getStory();
        }

        public void send_getStory(int storyId, long myId) throws TException {
            oprot_.writeMessageBegin(new TMessage("getStory", TMessageType.CALL, ++seqid_));
            getStory_args args = new getStory_args();
            args.setStoryId(storyId);
            args.setMyId(myId);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public Story recv_getStory() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStory failed: out of sequence response");
            }
            getStory_result result = new getStory_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStory failed: unknown result");
        }

        public List<Long> likedBy(int storyId) throws TException {
            send_likedBy(storyId);
            return recv_likedBy();
        }

        public void send_likedBy(int storyId) throws TException {
            oprot_.writeMessageBegin(new TMessage("likedBy", TMessageType.CALL, ++seqid_));
            likedBy_args args = new likedBy_args();
            args.setStoryId(storyId);
            args.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public List<Long> recv_likedBy() throws TException {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.read(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "likedBy failed: out of sequence response");
            }
            likedBy_result result = new likedBy_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "likedBy failed: unknown result");
        }

    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private TAsyncClientManager clientManager;
            private TProtocolFactory protocolFactory;

            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void addStory(long myId, String description, String body, AsyncMethodCallback<addStory_call> resultHandler) throws TException {
            checkReady();
            addStory_call method_call = new addStory_call(myId, description, body, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class addStory_call extends TAsyncMethodCall {
            private long myId;
            private String description;
            private String body;

            public addStory_call(long myId, String description, String body, AsyncMethodCallback<addStory_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.myId = myId;
                this.description = description;
                this.body = body;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("addStory", TMessageType.CALL, 0));
                addStory_args args = new addStory_args();
                args.setMyId(myId);
                args.setDescription(description);
                args.setBody(body);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_addStory();
            }
        }

        public void getStories(long userId, boolean best, int page, long myId, AsyncMethodCallback<getStories_call> resultHandler) throws TException {
            checkReady();
            getStories_call method_call = new getStories_call(userId, best, page, myId, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getStories_call extends TAsyncMethodCall {
            private long userId;
            private boolean best;
            private int page;
            private long myId;

            public getStories_call(long userId, boolean best, int page, long myId, AsyncMethodCallback<getStories_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.best = best;
                this.page = page;
                this.myId = myId;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getStories", TMessageType.CALL, 0));
                getStories_args args = new getStories_args();
                args.setUserId(userId);
                args.setBest(best);
                args.setPage(page);
                args.setMyId(myId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Story> getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getStories();
            }
        }

        public void getLiked(long userId, boolean best, int page, long myId, AsyncMethodCallback<getLiked_call> resultHandler) throws TException {
            checkReady();
            getLiked_call method_call = new getLiked_call(userId, best, page, myId, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getLiked_call extends TAsyncMethodCall {
            private long userId;
            private boolean best;
            private int page;
            private long myId;

            public getLiked_call(long userId, boolean best, int page, long myId, AsyncMethodCallback<getLiked_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.best = best;
                this.page = page;
                this.myId = myId;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getLiked", TMessageType.CALL, 0));
                getLiked_args args = new getLiked_args();
                args.setUserId(userId);
                args.setBest(best);
                args.setPage(page);
                args.setMyId(myId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Story> getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getLiked();
            }
        }

        public void likeIt(long myId, int storyId, AsyncMethodCallback<likeIt_call> resultHandler) throws TException {
            checkReady();
            likeIt_call method_call = new likeIt_call(myId, storyId, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class likeIt_call extends TAsyncMethodCall {
            private long myId;
            private int storyId;

            public likeIt_call(long myId, int storyId, AsyncMethodCallback<likeIt_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.myId = myId;
                this.storyId = storyId;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("likeIt", TMessageType.CALL, 0));
                likeIt_args args = new likeIt_args();
                args.setMyId(myId);
                args.setStoryId(storyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_likeIt();
            }
        }

        public void getStory(int storyId, long myId, AsyncMethodCallback<getStory_call> resultHandler) throws TException {
            checkReady();
            getStory_call method_call = new getStory_call(storyId, myId, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class getStory_call extends TAsyncMethodCall {
            private int storyId;
            private long myId;

            public getStory_call(int storyId, long myId, AsyncMethodCallback<getStory_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.storyId = storyId;
                this.myId = myId;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getStory", TMessageType.CALL, 0));
                getStory_args args = new getStory_args();
                args.setStoryId(storyId);
                args.setMyId(myId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Story getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getStory();
            }
        }

        public void likedBy(int storyId, AsyncMethodCallback<likedBy_call> resultHandler) throws TException {
            checkReady();
            likedBy_call method_call = new likedBy_call(storyId, resultHandler, this, protocolFactory, transport);
            manager.call(method_call);
        }

        public static class likedBy_call extends TAsyncMethodCall {
            private int storyId;

            public likedBy_call(int storyId, AsyncMethodCallback<likedBy_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.storyId = storyId;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("likedBy", TMessageType.CALL, 0));
                likedBy_args args = new likedBy_args();
                args.setStoryId(storyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Long> getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_likedBy();
            }
        }

    }

    public static class Processor implements TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(Iface iface) {
            iface_ = iface;
            processMap_.put("addStory", new addStory());
            processMap_.put("getStories", new getStories());
            processMap_.put("getLiked", new getLiked());
            processMap_.put("likeIt", new likeIt());
            processMap_.put("getStory", new getStory());
            processMap_.put("likedBy", new likedBy());
        }

        protected static interface ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
        }

        private Iface iface_;
        protected final HashMap<String, ProcessFunction> processMap_ = new HashMap<String, ProcessFunction>();

        public boolean process(TProtocol iprot, TProtocol oprot) throws TException {
            TMessage msg = iprot.readMessageBegin();
            ProcessFunction fn = processMap_.get(msg.name);
            if (fn == null) {
                TProtocolUtil.skip(iprot, TType.STRUCT);
                iprot.readMessageEnd();
                TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
                oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
                x.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
                return true;
            }
            fn.process(msg.seqid, iprot, oprot);
            return true;
        }

        private class addStory implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                addStory_args args = new addStory_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("addStory", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                addStory_result result = new addStory_result();
                iface_.addStory(args.myId, args.description, args.body);
                oprot.writeMessageBegin(new TMessage("addStory", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getStories implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getStories_args args = new getStories_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getStories", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getStories_result result = new getStories_result();
                result.success = iface_.getStories(args.userId, args.best, args.page, args.myId);
                oprot.writeMessageBegin(new TMessage("getStories", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getLiked implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getLiked_args args = new getLiked_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getLiked", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getLiked_result result = new getLiked_result();
                result.success = iface_.getLiked(args.userId, args.best, args.page, args.myId);
                oprot.writeMessageBegin(new TMessage("getLiked", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class likeIt implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                likeIt_args args = new likeIt_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("likeIt", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                likeIt_result result = new likeIt_result();
                iface_.likeIt(args.myId, args.storyId);
                oprot.writeMessageBegin(new TMessage("likeIt", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class getStory implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                getStory_args args = new getStory_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("getStory", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                getStory_result result = new getStory_result();
                result.success = iface_.getStory(args.storyId, args.myId);
                oprot.writeMessageBegin(new TMessage("getStory", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

        private class likedBy implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
                likedBy_args args = new likedBy_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("likedBy", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                likedBy_result result = new likedBy_result();
                result.success = iface_.likedBy(args.storyId);
                oprot.writeMessageBegin(new TMessage("likedBy", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }

        }

    }

    public static class addStory_args implements TBase<addStory_args, addStory_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addStory_args");

        private static final TField MY_ID_FIELD_DESC = new TField("myId", TType.I64, (short) 1);
        private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short) 2);
        private static final TField BODY_FIELD_DESC = new TField("body", TType.STRING, (short) 3);

        public long myId;
        public String description;
        public String body;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            MY_ID((short) 1, "myId"),
            DESCRIPTION((short) 2, "description"),
            BODY((short) 3, "body");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // DESCRIPTION
                        return DESCRIPTION;
                    case 3: // BODY
                        return BODY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MYID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new FieldMetaData("myId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.BODY, new FieldMetaData("body", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addStory_args.class, metaDataMap);
        }

        public addStory_args() {
        }

        public addStory_args(
                long myId,
                String description,
                String body) {
            this();
            this.myId = myId;
            setMyIdIsSet(true);
            this.description = description;
            this.body = body;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addStory_args(addStory_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.myId = other.myId;
            if (other.isSetDescription()) {
                this.description = other.description;
            }
            if (other.isSetBody()) {
                this.body = other.body;
            }
        }

        public addStory_args deepCopy() {
            return new addStory_args(this);
        }

        @Override
        public void clear() {
            setMyIdIsSet(false);
            this.myId = 0;
            this.description = null;
            this.body = null;
        }

        public long getMyId() {
            return this.myId;
        }

        public addStory_args setMyId(long myId) {
            this.myId = myId;
            setMyIdIsSet(true);
            return this;
        }

        public void unsetMyId() {
            __isset_bit_vector.clear(__MYID_ISSET_ID);
        }

        /**
         * Returns true if field myId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetMyId() {
            return __isset_bit_vector.get(__MYID_ISSET_ID);
        }

        public void setMyIdIsSet(boolean value) {
            __isset_bit_vector.set(__MYID_ISSET_ID, value);
        }

        public String getDescription() {
            return this.description;
        }

        public addStory_args setDescription(String description) {
            this.description = description;
            return this;
        }

        public void unsetDescription() {
            this.description = null;
        }

        /**
         * Returns true if field description is set (has been asigned a value) and false otherwise
         */
        public boolean isSetDescription() {
            return this.description != null;
        }

        public void setDescriptionIsSet(boolean value) {
            if (!value) {
                this.description = null;
            }
        }

        public String getBody() {
            return this.body;
        }

        public addStory_args setBody(String body) {
            this.body = body;
            return this;
        }

        public void unsetBody() {
            this.body = null;
        }

        /**
         * Returns true if field body is set (has been asigned a value) and false otherwise
         */
        public boolean isSetBody() {
            return this.body != null;
        }

        public void setBodyIsSet(boolean value) {
            if (!value) {
                this.body = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((Long) value);
                    }
                    break;

                case DESCRIPTION:
                    if (value == null) {
                        unsetDescription();
                    } else {
                        setDescription((String) value);
                    }
                    break;

                case BODY:
                    if (value == null) {
                        unsetBody();
                    } else {
                        setBody((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return new Long(getMyId());

                case DESCRIPTION:
                    return getDescription();

                case BODY:
                    return getBody();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case DESCRIPTION:
                    return isSetDescription();
                case BODY:
                    return isSetBody();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addStory_args)
                return this.equals((addStory_args) that);
            return false;
        }

        public boolean equals(addStory_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true;
            boolean that_present_myId = true;
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (this.myId != that.myId)
                    return false;
            }

            boolean this_present_description = true && this.isSetDescription();
            boolean that_present_description = true && that.isSetDescription();
            if (this_present_description || that_present_description) {
                if (!(this_present_description && that_present_description))
                    return false;
                if (!this.description.equals(that.description))
                    return false;
            }

            boolean this_present_body = true && this.isSetBody();
            boolean that_present_body = true && that.isSetBody();
            if (this_present_body || that_present_body) {
                if (!(this_present_body && that_present_body))
                    return false;
                if (!this.body.equals(that.body))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addStory_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addStory_args typedOther = (addStory_args) other;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(typedOther.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = TBaseHelper.compareTo(this.myId, typedOther.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDescription()) {
                lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBody()).compareTo(typedOther.isSetBody());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBody()) {
                lastComparison = TBaseHelper.compareTo(this.body, typedOther.body);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // MY_ID
                        if (field.type == TType.I64) {
                            this.myId = iprot.readI64();
                            setMyIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 2: // DESCRIPTION
                        if (field.type == TType.STRING) {
                            this.description = iprot.readString();
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 3: // BODY
                        if (field.type == TType.STRING) {
                            this.body = iprot.readString();
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(MY_ID_FIELD_DESC);
            oprot.writeI64(this.myId);
            oprot.writeFieldEnd();
            if (this.description != null) {
                oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
                oprot.writeString(this.description);
                oprot.writeFieldEnd();
            }
            if (this.body != null) {
                oprot.writeFieldBegin(BODY_FIELD_DESC);
                oprot.writeString(this.body);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addStory_args(");
            boolean first = true;

            sb.append("myId:");
            sb.append(this.myId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("description:");
            if (this.description == null) {
                sb.append("null");
            } else {
                sb.append(this.description);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("body:");
            if (this.body == null) {
                sb.append("null");
            } else {
                sb.append(this.body);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class addStory_result implements TBase<addStory_result, addStory_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("addStory_result");


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(addStory_result.class, metaDataMap);
        }

        public addStory_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addStory_result(addStory_result other) {
        }

        public addStory_result deepCopy() {
            return new addStory_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addStory_result)
                return this.equals((addStory_result) that);
            return false;
        }

        public boolean equals(addStory_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(addStory_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            addStory_result typedOther = (addStory_result) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addStory_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getStories_args implements TBase<getStories_args, getStories_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getStories_args");

        private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short) 1);
        private static final TField BEST_FIELD_DESC = new TField("best", TType.BOOL, (short) 2);
        private static final TField PAGE_FIELD_DESC = new TField("page", TType.I32, (short) 3);
        private static final TField MY_ID_FIELD_DESC = new TField("myId", TType.I64, (short) 4);

        public long userId;
        public boolean best;
        public int page;
        public long myId;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USER_ID((short) 1, "userId"),
            BEST((short) 2, "best"),
            PAGE((short) 3, "page"),
            MY_ID((short) 4, "myId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // BEST
                        return BEST;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // MY_ID
                        return MY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __BEST_ISSET_ID = 1;
        private static final int __PAGE_ISSET_ID = 2;
        private static final int __MYID_ISSET_ID = 3;
        private BitSet __isset_bit_vector = new BitSet(4);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            tmpMap.put(_Fields.BEST, new FieldMetaData("best", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.BOOL)));
            tmpMap.put(_Fields.PAGE, new FieldMetaData("page", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.MY_ID, new FieldMetaData("myId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getStories_args.class, metaDataMap);
        }

        public getStories_args() {
        }

        public getStories_args(
                long userId,
                boolean best,
                int page,
                long myId) {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.best = best;
            setBestIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.myId = myId;
            setMyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getStories_args(getStories_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.userId = other.userId;
            this.best = other.best;
            this.page = other.page;
            this.myId = other.myId;
        }

        public getStories_args deepCopy() {
            return new getStories_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setBestIsSet(false);
            this.best = false;
            setPageIsSet(false);
            this.page = 0;
            setMyIdIsSet(false);
            this.myId = 0;
        }

        public long getUserId() {
            return this.userId;
        }

        public getStories_args setUserId(long userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bit_vector.clear(__USERID_ISSET_ID);
        }

        /**
         * Returns true if field userId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetUserId() {
            return __isset_bit_vector.get(__USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bit_vector.set(__USERID_ISSET_ID, value);
        }

        public boolean isBest() {
            return this.best;
        }

        public getStories_args setBest(boolean best) {
            this.best = best;
            setBestIsSet(true);
            return this;
        }

        public void unsetBest() {
            __isset_bit_vector.clear(__BEST_ISSET_ID);
        }

        /**
         * Returns true if field best is set (has been asigned a value) and false otherwise
         */
        public boolean isSetBest() {
            return __isset_bit_vector.get(__BEST_ISSET_ID);
        }

        public void setBestIsSet(boolean value) {
            __isset_bit_vector.set(__BEST_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public getStories_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bit_vector.clear(__PAGE_ISSET_ID);
        }

        /**
         * Returns true if field page is set (has been asigned a value) and false otherwise
         */
        public boolean isSetPage() {
            return __isset_bit_vector.get(__PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bit_vector.set(__PAGE_ISSET_ID, value);
        }

        public long getMyId() {
            return this.myId;
        }

        public getStories_args setMyId(long myId) {
            this.myId = myId;
            setMyIdIsSet(true);
            return this;
        }

        public void unsetMyId() {
            __isset_bit_vector.clear(__MYID_ISSET_ID);
        }

        /**
         * Returns true if field myId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetMyId() {
            return __isset_bit_vector.get(__MYID_ISSET_ID);
        }

        public void setMyIdIsSet(boolean value) {
            __isset_bit_vector.set(__MYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((Long) value);
                    }
                    break;

                case BEST:
                    if (value == null) {
                        unsetBest();
                    } else {
                        setBest((Boolean) value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((Integer) value);
                    }
                    break;

                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return new Long(getUserId());

                case BEST:
                    return new Boolean(isBest());

                case PAGE:
                    return new Integer(getPage());

                case MY_ID:
                    return new Long(getMyId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case BEST:
                    return isSetBest();
                case PAGE:
                    return isSetPage();
                case MY_ID:
                    return isSetMyId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getStories_args)
                return this.equals((getStories_args) that);
            return false;
        }

        public boolean equals(getStories_args that) {
            if (that == null)
                return false;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_best = true;
            boolean that_present_best = true;
            if (this_present_best || that_present_best) {
                if (!(this_present_best && that_present_best))
                    return false;
                if (this.best != that.best)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_myId = true;
            boolean that_present_myId = true;
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (this.myId != that.myId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getStories_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getStories_args typedOther = (getStories_args) other;

            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBest()).compareTo(typedOther.isSetBest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBest()) {
                lastComparison = TBaseHelper.compareTo(this.best, typedOther.best);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = TBaseHelper.compareTo(this.page, typedOther.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(typedOther.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = TBaseHelper.compareTo(this.myId, typedOther.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // USER_ID
                        if (field.type == TType.I64) {
                            this.userId = iprot.readI64();
                            setUserIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 2: // BEST
                        if (field.type == TType.BOOL) {
                            this.best = iprot.readBool();
                            setBestIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 3: // PAGE
                        if (field.type == TType.I32) {
                            this.page = iprot.readI32();
                            setPageIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 4: // MY_ID
                        if (field.type == TType.I64) {
                            this.myId = iprot.readI64();
                            setMyIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(USER_ID_FIELD_DESC);
            oprot.writeI64(this.userId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(BEST_FIELD_DESC);
            oprot.writeBool(this.best);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PAGE_FIELD_DESC);
            oprot.writeI32(this.page);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(MY_ID_FIELD_DESC);
            oprot.writeI64(this.myId);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getStories_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("best:");
            sb.append(this.best);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("myId:");
            sb.append(this.myId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getStories_result implements TBase<getStories_result, getStories_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getStories_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short) 0);

        public List<Story> success;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new ListMetaData(TType.LIST,
                            new StructMetaData(TType.STRUCT, Story.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getStories_result.class, metaDataMap);
        }

        public getStories_result() {
        }

        public getStories_result(
                List<Story> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getStories_result(getStories_result other) {
            if (other.isSetSuccess()) {
                List<Story> __this__success = new ArrayList<Story>();
                for (Story other_element : other.success) {
                    __this__success.add(new Story(other_element));
                }
                this.success = __this__success;
            }
        }

        public getStories_result deepCopy() {
            return new getStories_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Story> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Story elem) {
            if (this.success == null) {
                this.success = new ArrayList<Story>();
            }
            this.success.add(elem);
        }

        public List<Story> getSuccess() {
            return this.success;
        }

        public getStories_result setSuccess(List<Story> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Story>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getStories_result)
                return this.equals((getStories_result) that);
            return false;
        }

        public boolean equals(getStories_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getStories_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getStories_result typedOther = (getStories_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.LIST) {
                            {
                                TList _list0 = iprot.readListBegin();
                                this.success = new ArrayList<Story>(_list0.size);
                                for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                                    Story _elem2;
                                    _elem2 = new Story();
                                    _elem2.read(iprot);
                                    this.success.add(_elem2);
                                }
                                iprot.readListEnd();
                            }
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                {
                    oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
                    for (Story _iter3 : this.success) {
                        _iter3.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getStories_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getLiked_args implements TBase<getLiked_args, getLiked_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getLiked_args");

        private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short) 1);
        private static final TField BEST_FIELD_DESC = new TField("best", TType.BOOL, (short) 2);
        private static final TField PAGE_FIELD_DESC = new TField("page", TType.I32, (short) 3);
        private static final TField MY_ID_FIELD_DESC = new TField("myId", TType.I64, (short) 4);

        public long userId;
        public boolean best;
        public int page;
        public long myId;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USER_ID((short) 1, "userId"),
            BEST((short) 2, "best"),
            PAGE((short) 3, "page"),
            MY_ID((short) 4, "myId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // BEST
                        return BEST;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // MY_ID
                        return MY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __BEST_ISSET_ID = 1;
        private static final int __PAGE_ISSET_ID = 2;
        private static final int __MYID_ISSET_ID = 3;
        private BitSet __isset_bit_vector = new BitSet(4);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            tmpMap.put(_Fields.BEST, new FieldMetaData("best", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.BOOL)));
            tmpMap.put(_Fields.PAGE, new FieldMetaData("page", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.MY_ID, new FieldMetaData("myId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getLiked_args.class, metaDataMap);
        }

        public getLiked_args() {
        }

        public getLiked_args(
                long userId,
                boolean best,
                int page,
                long myId) {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.best = best;
            setBestIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.myId = myId;
            setMyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getLiked_args(getLiked_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.userId = other.userId;
            this.best = other.best;
            this.page = other.page;
            this.myId = other.myId;
        }

        public getLiked_args deepCopy() {
            return new getLiked_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setBestIsSet(false);
            this.best = false;
            setPageIsSet(false);
            this.page = 0;
            setMyIdIsSet(false);
            this.myId = 0;
        }

        public long getUserId() {
            return this.userId;
        }

        public getLiked_args setUserId(long userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bit_vector.clear(__USERID_ISSET_ID);
        }

        /**
         * Returns true if field userId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetUserId() {
            return __isset_bit_vector.get(__USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bit_vector.set(__USERID_ISSET_ID, value);
        }

        public boolean isBest() {
            return this.best;
        }

        public getLiked_args setBest(boolean best) {
            this.best = best;
            setBestIsSet(true);
            return this;
        }

        public void unsetBest() {
            __isset_bit_vector.clear(__BEST_ISSET_ID);
        }

        /**
         * Returns true if field best is set (has been asigned a value) and false otherwise
         */
        public boolean isSetBest() {
            return __isset_bit_vector.get(__BEST_ISSET_ID);
        }

        public void setBestIsSet(boolean value) {
            __isset_bit_vector.set(__BEST_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public getLiked_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bit_vector.clear(__PAGE_ISSET_ID);
        }

        /**
         * Returns true if field page is set (has been asigned a value) and false otherwise
         */
        public boolean isSetPage() {
            return __isset_bit_vector.get(__PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bit_vector.set(__PAGE_ISSET_ID, value);
        }

        public long getMyId() {
            return this.myId;
        }

        public getLiked_args setMyId(long myId) {
            this.myId = myId;
            setMyIdIsSet(true);
            return this;
        }

        public void unsetMyId() {
            __isset_bit_vector.clear(__MYID_ISSET_ID);
        }

        /**
         * Returns true if field myId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetMyId() {
            return __isset_bit_vector.get(__MYID_ISSET_ID);
        }

        public void setMyIdIsSet(boolean value) {
            __isset_bit_vector.set(__MYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((Long) value);
                    }
                    break;

                case BEST:
                    if (value == null) {
                        unsetBest();
                    } else {
                        setBest((Boolean) value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((Integer) value);
                    }
                    break;

                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return new Long(getUserId());

                case BEST:
                    return new Boolean(isBest());

                case PAGE:
                    return new Integer(getPage());

                case MY_ID:
                    return new Long(getMyId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case BEST:
                    return isSetBest();
                case PAGE:
                    return isSetPage();
                case MY_ID:
                    return isSetMyId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getLiked_args)
                return this.equals((getLiked_args) that);
            return false;
        }

        public boolean equals(getLiked_args that) {
            if (that == null)
                return false;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_best = true;
            boolean that_present_best = true;
            if (this_present_best || that_present_best) {
                if (!(this_present_best && that_present_best))
                    return false;
                if (this.best != that.best)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_myId = true;
            boolean that_present_myId = true;
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (this.myId != that.myId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getLiked_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getLiked_args typedOther = (getLiked_args) other;

            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBest()).compareTo(typedOther.isSetBest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBest()) {
                lastComparison = TBaseHelper.compareTo(this.best, typedOther.best);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = TBaseHelper.compareTo(this.page, typedOther.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(typedOther.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = TBaseHelper.compareTo(this.myId, typedOther.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // USER_ID
                        if (field.type == TType.I64) {
                            this.userId = iprot.readI64();
                            setUserIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 2: // BEST
                        if (field.type == TType.BOOL) {
                            this.best = iprot.readBool();
                            setBestIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 3: // PAGE
                        if (field.type == TType.I32) {
                            this.page = iprot.readI32();
                            setPageIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 4: // MY_ID
                        if (field.type == TType.I64) {
                            this.myId = iprot.readI64();
                            setMyIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(USER_ID_FIELD_DESC);
            oprot.writeI64(this.userId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(BEST_FIELD_DESC);
            oprot.writeBool(this.best);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PAGE_FIELD_DESC);
            oprot.writeI32(this.page);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(MY_ID_FIELD_DESC);
            oprot.writeI64(this.myId);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getLiked_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("best:");
            sb.append(this.best);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("myId:");
            sb.append(this.myId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getLiked_result implements TBase<getLiked_result, getLiked_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getLiked_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short) 0);

        public List<Story> success;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new ListMetaData(TType.LIST,
                            new StructMetaData(TType.STRUCT, Story.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getLiked_result.class, metaDataMap);
        }

        public getLiked_result() {
        }

        public getLiked_result(
                List<Story> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getLiked_result(getLiked_result other) {
            if (other.isSetSuccess()) {
                List<Story> __this__success = new ArrayList<Story>();
                for (Story other_element : other.success) {
                    __this__success.add(new Story(other_element));
                }
                this.success = __this__success;
            }
        }

        public getLiked_result deepCopy() {
            return new getLiked_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Story> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Story elem) {
            if (this.success == null) {
                this.success = new ArrayList<Story>();
            }
            this.success.add(elem);
        }

        public List<Story> getSuccess() {
            return this.success;
        }

        public getLiked_result setSuccess(List<Story> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Story>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getLiked_result)
                return this.equals((getLiked_result) that);
            return false;
        }

        public boolean equals(getLiked_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getLiked_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getLiked_result typedOther = (getLiked_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.LIST) {
                            {
                                TList _list4 = iprot.readListBegin();
                                this.success = new ArrayList<Story>(_list4.size);
                                for (int _i5 = 0; _i5 < _list4.size; ++_i5) {
                                    Story _elem6;
                                    _elem6 = new Story();
                                    _elem6.read(iprot);
                                    this.success.add(_elem6);
                                }
                                iprot.readListEnd();
                            }
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                {
                    oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
                    for (Story _iter7 : this.success) {
                        _iter7.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getLiked_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class likeIt_args implements TBase<likeIt_args, likeIt_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("likeIt_args");

        private static final TField MY_ID_FIELD_DESC = new TField("myId", TType.I64, (short) 1);
        private static final TField STORY_ID_FIELD_DESC = new TField("storyId", TType.I32, (short) 2);

        public long myId;
        public int storyId;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            MY_ID((short) 1, "myId"),
            STORY_ID((short) 2, "storyId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // STORY_ID
                        return STORY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MYID_ISSET_ID = 0;
        private static final int __STORYID_ISSET_ID = 1;
        private BitSet __isset_bit_vector = new BitSet(2);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new FieldMetaData("myId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            tmpMap.put(_Fields.STORY_ID, new FieldMetaData("storyId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(likeIt_args.class, metaDataMap);
        }

        public likeIt_args() {
        }

        public likeIt_args(
                long myId,
                int storyId) {
            this();
            this.myId = myId;
            setMyIdIsSet(true);
            this.storyId = storyId;
            setStoryIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public likeIt_args(likeIt_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.myId = other.myId;
            this.storyId = other.storyId;
        }

        public likeIt_args deepCopy() {
            return new likeIt_args(this);
        }

        @Override
        public void clear() {
            setMyIdIsSet(false);
            this.myId = 0;
            setStoryIdIsSet(false);
            this.storyId = 0;
        }

        public long getMyId() {
            return this.myId;
        }

        public likeIt_args setMyId(long myId) {
            this.myId = myId;
            setMyIdIsSet(true);
            return this;
        }

        public void unsetMyId() {
            __isset_bit_vector.clear(__MYID_ISSET_ID);
        }

        /**
         * Returns true if field myId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetMyId() {
            return __isset_bit_vector.get(__MYID_ISSET_ID);
        }

        public void setMyIdIsSet(boolean value) {
            __isset_bit_vector.set(__MYID_ISSET_ID, value);
        }

        public int getStoryId() {
            return this.storyId;
        }

        public likeIt_args setStoryId(int storyId) {
            this.storyId = storyId;
            setStoryIdIsSet(true);
            return this;
        }

        public void unsetStoryId() {
            __isset_bit_vector.clear(__STORYID_ISSET_ID);
        }

        /**
         * Returns true if field storyId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetStoryId() {
            return __isset_bit_vector.get(__STORYID_ISSET_ID);
        }

        public void setStoryIdIsSet(boolean value) {
            __isset_bit_vector.set(__STORYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((Long) value);
                    }
                    break;

                case STORY_ID:
                    if (value == null) {
                        unsetStoryId();
                    } else {
                        setStoryId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return new Long(getMyId());

                case STORY_ID:
                    return new Integer(getStoryId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case STORY_ID:
                    return isSetStoryId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof likeIt_args)
                return this.equals((likeIt_args) that);
            return false;
        }

        public boolean equals(likeIt_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true;
            boolean that_present_myId = true;
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (this.myId != that.myId)
                    return false;
            }

            boolean this_present_storyId = true;
            boolean that_present_storyId = true;
            if (this_present_storyId || that_present_storyId) {
                if (!(this_present_storyId && that_present_storyId))
                    return false;
                if (this.storyId != that.storyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(likeIt_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            likeIt_args typedOther = (likeIt_args) other;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(typedOther.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = TBaseHelper.compareTo(this.myId, typedOther.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetStoryId()).compareTo(typedOther.isSetStoryId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStoryId()) {
                lastComparison = TBaseHelper.compareTo(this.storyId, typedOther.storyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // MY_ID
                        if (field.type == TType.I64) {
                            this.myId = iprot.readI64();
                            setMyIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 2: // STORY_ID
                        if (field.type == TType.I32) {
                            this.storyId = iprot.readI32();
                            setStoryIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(MY_ID_FIELD_DESC);
            oprot.writeI64(this.myId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(STORY_ID_FIELD_DESC);
            oprot.writeI32(this.storyId);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("likeIt_args(");
            boolean first = true;

            sb.append("myId:");
            sb.append(this.myId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("storyId:");
            sb.append(this.storyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class likeIt_result implements TBase<likeIt_result, likeIt_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("likeIt_result");


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(likeIt_result.class, metaDataMap);
        }

        public likeIt_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public likeIt_result(likeIt_result other) {
        }

        public likeIt_result deepCopy() {
            return new likeIt_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof likeIt_result)
                return this.equals((likeIt_result) that);
            return false;
        }

        public boolean equals(likeIt_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(likeIt_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            likeIt_result typedOther = (likeIt_result) other;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("likeIt_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getStory_args implements TBase<getStory_args, getStory_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getStory_args");

        private static final TField STORY_ID_FIELD_DESC = new TField("storyId", TType.I32, (short) 1);
        private static final TField MY_ID_FIELD_DESC = new TField("myId", TType.I64, (short) 2);

        public int storyId;
        public long myId;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            STORY_ID((short) 1, "storyId"),
            MY_ID((short) 2, "myId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // STORY_ID
                        return STORY_ID;
                    case 2: // MY_ID
                        return MY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __STORYID_ISSET_ID = 0;
        private static final int __MYID_ISSET_ID = 1;
        private BitSet __isset_bit_vector = new BitSet(2);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.STORY_ID, new FieldMetaData("storyId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            tmpMap.put(_Fields.MY_ID, new FieldMetaData("myId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getStory_args.class, metaDataMap);
        }

        public getStory_args() {
        }

        public getStory_args(
                int storyId,
                long myId) {
            this();
            this.storyId = storyId;
            setStoryIdIsSet(true);
            this.myId = myId;
            setMyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getStory_args(getStory_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.storyId = other.storyId;
            this.myId = other.myId;
        }

        public getStory_args deepCopy() {
            return new getStory_args(this);
        }

        @Override
        public void clear() {
            setStoryIdIsSet(false);
            this.storyId = 0;
            setMyIdIsSet(false);
            this.myId = 0;
        }

        public int getStoryId() {
            return this.storyId;
        }

        public getStory_args setStoryId(int storyId) {
            this.storyId = storyId;
            setStoryIdIsSet(true);
            return this;
        }

        public void unsetStoryId() {
            __isset_bit_vector.clear(__STORYID_ISSET_ID);
        }

        /**
         * Returns true if field storyId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetStoryId() {
            return __isset_bit_vector.get(__STORYID_ISSET_ID);
        }

        public void setStoryIdIsSet(boolean value) {
            __isset_bit_vector.set(__STORYID_ISSET_ID, value);
        }

        public long getMyId() {
            return this.myId;
        }

        public getStory_args setMyId(long myId) {
            this.myId = myId;
            setMyIdIsSet(true);
            return this;
        }

        public void unsetMyId() {
            __isset_bit_vector.clear(__MYID_ISSET_ID);
        }

        /**
         * Returns true if field myId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetMyId() {
            return __isset_bit_vector.get(__MYID_ISSET_ID);
        }

        public void setMyIdIsSet(boolean value) {
            __isset_bit_vector.set(__MYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case STORY_ID:
                    if (value == null) {
                        unsetStoryId();
                    } else {
                        setStoryId((Integer) value);
                    }
                    break;

                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case STORY_ID:
                    return new Integer(getStoryId());

                case MY_ID:
                    return new Long(getMyId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case STORY_ID:
                    return isSetStoryId();
                case MY_ID:
                    return isSetMyId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getStory_args)
                return this.equals((getStory_args) that);
            return false;
        }

        public boolean equals(getStory_args that) {
            if (that == null)
                return false;

            boolean this_present_storyId = true;
            boolean that_present_storyId = true;
            if (this_present_storyId || that_present_storyId) {
                if (!(this_present_storyId && that_present_storyId))
                    return false;
                if (this.storyId != that.storyId)
                    return false;
            }

            boolean this_present_myId = true;
            boolean that_present_myId = true;
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (this.myId != that.myId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getStory_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getStory_args typedOther = (getStory_args) other;

            lastComparison = Boolean.valueOf(isSetStoryId()).compareTo(typedOther.isSetStoryId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStoryId()) {
                lastComparison = TBaseHelper.compareTo(this.storyId, typedOther.storyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(typedOther.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = TBaseHelper.compareTo(this.myId, typedOther.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // STORY_ID
                        if (field.type == TType.I32) {
                            this.storyId = iprot.readI32();
                            setStoryIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    case 2: // MY_ID
                        if (field.type == TType.I64) {
                            this.myId = iprot.readI64();
                            setMyIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(STORY_ID_FIELD_DESC);
            oprot.writeI32(this.storyId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(MY_ID_FIELD_DESC);
            oprot.writeI64(this.myId);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getStory_args(");
            boolean first = true;

            sb.append("storyId:");
            sb.append(this.storyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("myId:");
            sb.append(this.myId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class getStory_result implements TBase<getStory_result, getStory_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("getStory_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);

        public Story success;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, Story.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getStory_result.class, metaDataMap);
        }

        public getStory_result() {
        }

        public getStory_result(
                Story success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getStory_result(getStory_result other) {
            if (other.isSetSuccess()) {
                this.success = new Story(other.success);
            }
        }

        public getStory_result deepCopy() {
            return new getStory_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public Story getSuccess() {
            return this.success;
        }

        public getStory_result setSuccess(Story success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Story) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getStory_result)
                return this.equals((getStory_result) that);
            return false;
        }

        public boolean equals(getStory_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(getStory_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            getStory_result typedOther = (getStory_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.STRUCT) {
                            this.success = new Story();
                            this.success.read(iprot);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getStory_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class likedBy_args implements TBase<likedBy_args, likedBy_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("likedBy_args");

        private static final TField STORY_ID_FIELD_DESC = new TField("storyId", TType.I32, (short) 1);

        public int storyId;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            STORY_ID((short) 1, "storyId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // STORY_ID
                        return STORY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __STORYID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.STORY_ID, new FieldMetaData("storyId", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(likedBy_args.class, metaDataMap);
        }

        public likedBy_args() {
        }

        public likedBy_args(
                int storyId) {
            this();
            this.storyId = storyId;
            setStoryIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public likedBy_args(likedBy_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.storyId = other.storyId;
        }

        public likedBy_args deepCopy() {
            return new likedBy_args(this);
        }

        @Override
        public void clear() {
            setStoryIdIsSet(false);
            this.storyId = 0;
        }

        public int getStoryId() {
            return this.storyId;
        }

        public likedBy_args setStoryId(int storyId) {
            this.storyId = storyId;
            setStoryIdIsSet(true);
            return this;
        }

        public void unsetStoryId() {
            __isset_bit_vector.clear(__STORYID_ISSET_ID);
        }

        /**
         * Returns true if field storyId is set (has been asigned a value) and false otherwise
         */
        public boolean isSetStoryId() {
            return __isset_bit_vector.get(__STORYID_ISSET_ID);
        }

        public void setStoryIdIsSet(boolean value) {
            __isset_bit_vector.set(__STORYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case STORY_ID:
                    if (value == null) {
                        unsetStoryId();
                    } else {
                        setStoryId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case STORY_ID:
                    return new Integer(getStoryId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case STORY_ID:
                    return isSetStoryId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof likedBy_args)
                return this.equals((likedBy_args) that);
            return false;
        }

        public boolean equals(likedBy_args that) {
            if (that == null)
                return false;

            boolean this_present_storyId = true;
            boolean that_present_storyId = true;
            if (this_present_storyId || that_present_storyId) {
                if (!(this_present_storyId && that_present_storyId))
                    return false;
                if (this.storyId != that.storyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(likedBy_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            likedBy_args typedOther = (likedBy_args) other;

            lastComparison = Boolean.valueOf(isSetStoryId()).compareTo(typedOther.isSetStoryId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStoryId()) {
                lastComparison = TBaseHelper.compareTo(this.storyId, typedOther.storyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // STORY_ID
                        if (field.type == TType.I32) {
                            this.storyId = iprot.readI32();
                            setStoryIdIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(STORY_ID_FIELD_DESC);
            oprot.writeI32(this.storyId);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("likedBy_args(");
            boolean first = true;

            sb.append("storyId:");
            sb.append(this.storyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

    public static class likedBy_result implements TBase<likedBy_result, likedBy_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("likedBy_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short) 0);

        public List<Long> success;

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new ListMetaData(TType.LIST,
                            new FieldValueMetaData(TType.I64))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(likedBy_result.class, metaDataMap);
        }

        public likedBy_result() {
        }

        public likedBy_result(
                List<Long> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public likedBy_result(likedBy_result other) {
            if (other.isSetSuccess()) {
                List<Long> __this__success = new ArrayList<Long>();
                for (Long other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public likedBy_result deepCopy() {
            return new likedBy_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Long> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(long elem) {
            if (this.success == null) {
                this.success = new ArrayList<Long>();
            }
            this.success.add(elem);
        }

        public List<Long> getSuccess() {
            return this.success;
        }

        public likedBy_result setSuccess(List<Long> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been asigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Long>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof likedBy_result)
                return this.equals((likedBy_result) that);
            return false;
        }

        public boolean equals(likedBy_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(likedBy_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            likedBy_result typedOther = (likedBy_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true) {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.LIST) {
                            {
                                TList _list8 = iprot.readListBegin();
                                this.success = new ArrayList<Long>(_list8.size);
                                for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                                    long _elem10;
                                    _elem10 = iprot.readI64();
                                    this.success.add(_elem10);
                                }
                                iprot.readListEnd();
                            }
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                {
                    oprot.writeListBegin(new TList(TType.I64, this.success.size()));
                    for (long _iter11 : this.success) {
                        oprot.writeI64(_iter11);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("likedBy_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }

    }

}
