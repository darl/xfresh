/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package ru.darlz.ff.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.MapMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

public class RemoteInternalResponse implements TBase<RemoteInternalResponse, RemoteInternalResponse._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("RemoteInternalResponse");

    private static final TField REDIRECT_TO_FIELD_DESC = new TField("redirectTo", TType.STRING, (short) 1);
    private static final TField COOKIES_FIELD_DESC = new TField("cookies", TType.MAP, (short) 2);
    private static final TField HTTP_STATUS_FIELD_DESC = new TField("httpStatus", TType.I32, (short) 3);
    private static final TField DATA_FIELD_DESC = new TField("data", TType.LIST, (short) 4);
    private static final TField ERRORS_FIELD_DESC = new TField("errors", TType.LIST, (short) 5);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, (short) 6);
    private static final TField HEADERS_FIELD_DESC = new TField("headers", TType.MAP, (short) 7);

    public String redirectTo;
    public Map<String, String> cookies;
    public int httpStatus;
    public List<String> data;
    public List<String> errors;
    public Map<String, String> attributes;
    public Map<String, String> headers;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        REDIRECT_TO((short) 1, "redirectTo"),
        COOKIES((short) 2, "cookies"),
        HTTP_STATUS((short) 3, "httpStatus"),
        DATA((short) 4, "data"),
        ERRORS((short) 5, "errors"),
        ATTRIBUTES((short) 6, "attributes"),
        HEADERS((short) 7, "headers");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // REDIRECT_TO
                    return REDIRECT_TO;
                case 2: // COOKIES
                    return COOKIES;
                case 3: // HTTP_STATUS
                    return HTTP_STATUS;
                case 4: // DATA
                    return DATA;
                case 5: // ERRORS
                    return ERRORS;
                case 6: // ATTRIBUTES
                    return ATTRIBUTES;
                case 7: // HEADERS
                    return HEADERS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __HTTPSTATUS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;

    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.REDIRECT_TO, new FieldMetaData("redirectTo", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.COOKIES, new FieldMetaData("cookies", TFieldRequirementType.DEFAULT,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new FieldValueMetaData(TType.STRING))));
        tmpMap.put(_Fields.HTTP_STATUS, new FieldMetaData("httpStatus", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT,
                new ListMetaData(TType.LIST,
                        new FieldValueMetaData(TType.STRING))));
        tmpMap.put(_Fields.ERRORS, new FieldMetaData("errors", TFieldRequirementType.DEFAULT,
                new ListMetaData(TType.LIST,
                        new FieldValueMetaData(TType.STRING))));
        tmpMap.put(_Fields.ATTRIBUTES, new FieldMetaData("attributes", TFieldRequirementType.DEFAULT,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new FieldValueMetaData(TType.STRING))));
        tmpMap.put(_Fields.HEADERS, new FieldMetaData("headers", TFieldRequirementType.DEFAULT,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new FieldValueMetaData(TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(RemoteInternalResponse.class, metaDataMap);
    }

    public RemoteInternalResponse() {
    }

    public RemoteInternalResponse(
            String redirectTo,
            Map<String, String> cookies,
            int httpStatus,
            List<String> data,
            List<String> errors,
            Map<String, String> attributes,
            Map<String, String> headers) {
        this();
        this.redirectTo = redirectTo;
        this.cookies = cookies;
        this.httpStatus = httpStatus;
        setHttpStatusIsSet(true);
        this.data = data;
        this.errors = errors;
        this.attributes = attributes;
        this.headers = headers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoteInternalResponse(RemoteInternalResponse other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetRedirectTo()) {
            this.redirectTo = other.redirectTo;
        }
        if (other.isSetCookies()) {
            Map<String, String> __this__cookies = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.cookies.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__cookies_copy_key = other_element_key;

                String __this__cookies_copy_value = other_element_value;

                __this__cookies.put(__this__cookies_copy_key, __this__cookies_copy_value);
            }
            this.cookies = __this__cookies;
        }
        this.httpStatus = other.httpStatus;
        if (other.isSetData()) {
            List<String> __this__data = new ArrayList<String>();
            for (String other_element : other.data) {
                __this__data.add(other_element);
            }
            this.data = __this__data;
        }
        if (other.isSetErrors()) {
            List<String> __this__errors = new ArrayList<String>();
            for (String other_element : other.errors) {
                __this__errors.add(other_element);
            }
            this.errors = __this__errors;
        }
        if (other.isSetAttributes()) {
            Map<String, String> __this__attributes = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.attributes.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__attributes_copy_key = other_element_key;

                String __this__attributes_copy_value = other_element_value;

                __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
            }
            this.attributes = __this__attributes;
        }
        if (other.isSetHeaders()) {
            Map<String, String> __this__headers = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.headers.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__headers_copy_key = other_element_key;

                String __this__headers_copy_value = other_element_value;

                __this__headers.put(__this__headers_copy_key, __this__headers_copy_value);
            }
            this.headers = __this__headers;
        }
    }

    public RemoteInternalResponse deepCopy() {
        return new RemoteInternalResponse(this);
    }

    @Override
    public void clear() {
        this.redirectTo = null;
        this.cookies = null;
        setHttpStatusIsSet(false);
        this.httpStatus = 0;
        this.data = null;
        this.errors = null;
        this.attributes = null;
        this.headers = null;
    }

    public String getRedirectTo() {
        return this.redirectTo;
    }

    public RemoteInternalResponse setRedirectTo(String redirectTo) {
        this.redirectTo = redirectTo;
        return this;
    }

    public void unsetRedirectTo() {
        this.redirectTo = null;
    }

    /**
     * Returns true if field redirectTo is set (has been asigned a value) and false otherwise
     */
    public boolean isSetRedirectTo() {
        return this.redirectTo != null;
    }

    public void setRedirectToIsSet(boolean value) {
        if (!value) {
            this.redirectTo = null;
        }
    }

    public int getCookiesSize() {
        return (this.cookies == null) ? 0 : this.cookies.size();
    }

    public void putToCookies(String key, String val) {
        if (this.cookies == null) {
            this.cookies = new HashMap<String, String>();
        }
        this.cookies.put(key, val);
    }

    public Map<String, String> getCookies() {
        return this.cookies;
    }

    public RemoteInternalResponse setCookies(Map<String, String> cookies) {
        this.cookies = cookies;
        return this;
    }

    public void unsetCookies() {
        this.cookies = null;
    }

    /**
     * Returns true if field cookies is set (has been asigned a value) and false otherwise
     */
    public boolean isSetCookies() {
        return this.cookies != null;
    }

    public void setCookiesIsSet(boolean value) {
        if (!value) {
            this.cookies = null;
        }
    }

    public int getHttpStatus() {
        return this.httpStatus;
    }

    public RemoteInternalResponse setHttpStatus(int httpStatus) {
        this.httpStatus = httpStatus;
        setHttpStatusIsSet(true);
        return this;
    }

    public void unsetHttpStatus() {
        __isset_bit_vector.clear(__HTTPSTATUS_ISSET_ID);
    }

    /**
     * Returns true if field httpStatus is set (has been asigned a value) and false otherwise
     */
    public boolean isSetHttpStatus() {
        return __isset_bit_vector.get(__HTTPSTATUS_ISSET_ID);
    }

    public void setHttpStatusIsSet(boolean value) {
        __isset_bit_vector.set(__HTTPSTATUS_ISSET_ID, value);
    }

    public int getDataSize() {
        return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<String> getDataIterator() {
        return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(String elem) {
        if (this.data == null) {
            this.data = new ArrayList<String>();
        }
        this.data.add(elem);
    }

    public List<String> getData() {
        return this.data;
    }

    public RemoteInternalResponse setData(List<String> data) {
        this.data = data;
        return this;
    }

    public void unsetData() {
        this.data = null;
    }

    /**
     * Returns true if field data is set (has been asigned a value) and false otherwise
     */
    public boolean isSetData() {
        return this.data != null;
    }

    public void setDataIsSet(boolean value) {
        if (!value) {
            this.data = null;
        }
    }

    public int getErrorsSize() {
        return (this.errors == null) ? 0 : this.errors.size();
    }

    public java.util.Iterator<String> getErrorsIterator() {
        return (this.errors == null) ? null : this.errors.iterator();
    }

    public void addToErrors(String elem) {
        if (this.errors == null) {
            this.errors = new ArrayList<String>();
        }
        this.errors.add(elem);
    }

    public List<String> getErrors() {
        return this.errors;
    }

    public RemoteInternalResponse setErrors(List<String> errors) {
        this.errors = errors;
        return this;
    }

    public void unsetErrors() {
        this.errors = null;
    }

    /**
     * Returns true if field errors is set (has been asigned a value) and false otherwise
     */
    public boolean isSetErrors() {
        return this.errors != null;
    }

    public void setErrorsIsSet(boolean value) {
        if (!value) {
            this.errors = null;
        }
    }

    public int getAttributesSize() {
        return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public void putToAttributes(String key, String val) {
        if (this.attributes == null) {
            this.attributes = new HashMap<String, String>();
        }
        this.attributes.put(key, val);
    }

    public Map<String, String> getAttributes() {
        return this.attributes;
    }

    public RemoteInternalResponse setAttributes(Map<String, String> attributes) {
        this.attributes = attributes;
        return this;
    }

    public void unsetAttributes() {
        this.attributes = null;
    }

    /**
     * Returns true if field attributes is set (has been asigned a value) and false otherwise
     */
    public boolean isSetAttributes() {
        return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
        if (!value) {
            this.attributes = null;
        }
    }

    public int getHeadersSize() {
        return (this.headers == null) ? 0 : this.headers.size();
    }

    public void putToHeaders(String key, String val) {
        if (this.headers == null) {
            this.headers = new HashMap<String, String>();
        }
        this.headers.put(key, val);
    }

    public Map<String, String> getHeaders() {
        return this.headers;
    }

    public RemoteInternalResponse setHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    public void unsetHeaders() {
        this.headers = null;
    }

    /**
     * Returns true if field headers is set (has been asigned a value) and false otherwise
     */
    public boolean isSetHeaders() {
        return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
        if (!value) {
            this.headers = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case REDIRECT_TO:
                if (value == null) {
                    unsetRedirectTo();
                } else {
                    setRedirectTo((String) value);
                }
                break;

            case COOKIES:
                if (value == null) {
                    unsetCookies();
                } else {
                    setCookies((Map<String, String>) value);
                }
                break;

            case HTTP_STATUS:
                if (value == null) {
                    unsetHttpStatus();
                } else {
                    setHttpStatus((Integer) value);
                }
                break;

            case DATA:
                if (value == null) {
                    unsetData();
                } else {
                    setData((List<String>) value);
                }
                break;

            case ERRORS:
                if (value == null) {
                    unsetErrors();
                } else {
                    setErrors((List<String>) value);
                }
                break;

            case ATTRIBUTES:
                if (value == null) {
                    unsetAttributes();
                } else {
                    setAttributes((Map<String, String>) value);
                }
                break;

            case HEADERS:
                if (value == null) {
                    unsetHeaders();
                } else {
                    setHeaders((Map<String, String>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case REDIRECT_TO:
                return getRedirectTo();

            case COOKIES:
                return getCookies();

            case HTTP_STATUS:
                return new Integer(getHttpStatus());

            case DATA:
                return getData();

            case ERRORS:
                return getErrors();

            case ATTRIBUTES:
                return getAttributes();

            case HEADERS:
                return getHeaders();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case REDIRECT_TO:
                return isSetRedirectTo();
            case COOKIES:
                return isSetCookies();
            case HTTP_STATUS:
                return isSetHttpStatus();
            case DATA:
                return isSetData();
            case ERRORS:
                return isSetErrors();
            case ATTRIBUTES:
                return isSetAttributes();
            case HEADERS:
                return isSetHeaders();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof RemoteInternalResponse)
            return this.equals((RemoteInternalResponse) that);
        return false;
    }

    public boolean equals(RemoteInternalResponse that) {
        if (that == null)
            return false;

        boolean this_present_redirectTo = true && this.isSetRedirectTo();
        boolean that_present_redirectTo = true && that.isSetRedirectTo();
        if (this_present_redirectTo || that_present_redirectTo) {
            if (!(this_present_redirectTo && that_present_redirectTo))
                return false;
            if (!this.redirectTo.equals(that.redirectTo))
                return false;
        }

        boolean this_present_cookies = true && this.isSetCookies();
        boolean that_present_cookies = true && that.isSetCookies();
        if (this_present_cookies || that_present_cookies) {
            if (!(this_present_cookies && that_present_cookies))
                return false;
            if (!this.cookies.equals(that.cookies))
                return false;
        }

        boolean this_present_httpStatus = true;
        boolean that_present_httpStatus = true;
        if (this_present_httpStatus || that_present_httpStatus) {
            if (!(this_present_httpStatus && that_present_httpStatus))
                return false;
            if (this.httpStatus != that.httpStatus)
                return false;
        }

        boolean this_present_data = true && this.isSetData();
        boolean that_present_data = true && that.isSetData();
        if (this_present_data || that_present_data) {
            if (!(this_present_data && that_present_data))
                return false;
            if (!this.data.equals(that.data))
                return false;
        }

        boolean this_present_errors = true && this.isSetErrors();
        boolean that_present_errors = true && that.isSetErrors();
        if (this_present_errors || that_present_errors) {
            if (!(this_present_errors && that_present_errors))
                return false;
            if (!this.errors.equals(that.errors))
                return false;
        }

        boolean this_present_attributes = true && this.isSetAttributes();
        boolean that_present_attributes = true && that.isSetAttributes();
        if (this_present_attributes || that_present_attributes) {
            if (!(this_present_attributes && that_present_attributes))
                return false;
            if (!this.attributes.equals(that.attributes))
                return false;
        }

        boolean this_present_headers = true && this.isSetHeaders();
        boolean that_present_headers = true && that.isSetHeaders();
        if (this_present_headers || that_present_headers) {
            if (!(this_present_headers && that_present_headers))
                return false;
            if (!this.headers.equals(that.headers))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(RemoteInternalResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        RemoteInternalResponse typedOther = (RemoteInternalResponse) other;

        lastComparison = Boolean.valueOf(isSetRedirectTo()).compareTo(typedOther.isSetRedirectTo());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRedirectTo()) {
            lastComparison = TBaseHelper.compareTo(this.redirectTo, typedOther.redirectTo);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCookies()).compareTo(typedOther.isSetCookies());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCookies()) {
            lastComparison = TBaseHelper.compareTo(this.cookies, typedOther.cookies);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHttpStatus()).compareTo(typedOther.isSetHttpStatus());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHttpStatus()) {
            lastComparison = TBaseHelper.compareTo(this.httpStatus, typedOther.httpStatus);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData()) {
            lastComparison = TBaseHelper.compareTo(this.data, typedOther.data);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetErrors()).compareTo(typedOther.isSetErrors());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetErrors()) {
            lastComparison = TBaseHelper.compareTo(this.errors, typedOther.errors);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(typedOther.isSetAttributes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAttributes()) {
            lastComparison = TBaseHelper.compareTo(this.attributes, typedOther.attributes);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(typedOther.isSetHeaders());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHeaders()) {
            lastComparison = TBaseHelper.compareTo(this.headers, typedOther.headers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // REDIRECT_TO
                    if (field.type == TType.STRING) {
                        this.redirectTo = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // COOKIES
                    if (field.type == TType.MAP) {
                        {
                            TMap _map19 = iprot.readMapBegin();
                            this.cookies = new HashMap<String, String>(2 * _map19.size);
                            for (int _i20 = 0; _i20 < _map19.size; ++_i20) {
                                String _key21;
                                String _val22;
                                _key21 = iprot.readString();
                                _val22 = iprot.readString();
                                this.cookies.put(_key21, _val22);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // HTTP_STATUS
                    if (field.type == TType.I32) {
                        this.httpStatus = iprot.readI32();
                        setHttpStatusIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // DATA
                    if (field.type == TType.LIST) {
                        {
                            TList _list23 = iprot.readListBegin();
                            this.data = new ArrayList<String>(_list23.size);
                            for (int _i24 = 0; _i24 < _list23.size; ++_i24) {
                                String _elem25;
                                _elem25 = iprot.readString();
                                this.data.add(_elem25);
                            }
                            iprot.readListEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // ERRORS
                    if (field.type == TType.LIST) {
                        {
                            TList _list26 = iprot.readListBegin();
                            this.errors = new ArrayList<String>(_list26.size);
                            for (int _i27 = 0; _i27 < _list26.size; ++_i27) {
                                String _elem28;
                                _elem28 = iprot.readString();
                                this.errors.add(_elem28);
                            }
                            iprot.readListEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 6: // ATTRIBUTES
                    if (field.type == TType.MAP) {
                        {
                            TMap _map29 = iprot.readMapBegin();
                            this.attributes = new HashMap<String, String>(2 * _map29.size);
                            for (int _i30 = 0; _i30 < _map29.size; ++_i30) {
                                String _key31;
                                String _val32;
                                _key31 = iprot.readString();
                                _val32 = iprot.readString();
                                this.attributes.put(_key31, _val32);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 7: // HEADERS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map33 = iprot.readMapBegin();
                            this.headers = new HashMap<String, String>(2 * _map33.size);
                            for (int _i34 = 0; _i34 < _map33.size; ++_i34) {
                                String _key35;
                                String _val36;
                                _key35 = iprot.readString();
                                _val36 = iprot.readString();
                                this.headers.put(_key35, _val36);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.redirectTo != null) {
            oprot.writeFieldBegin(REDIRECT_TO_FIELD_DESC);
            oprot.writeString(this.redirectTo);
            oprot.writeFieldEnd();
        }
        if (this.cookies != null) {
            oprot.writeFieldBegin(COOKIES_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.cookies.size()));
                for (Map.Entry<String, String> _iter37 : this.cookies.entrySet()) {
                    oprot.writeString(_iter37.getKey());
                    oprot.writeString(_iter37.getValue());
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HTTP_STATUS_FIELD_DESC);
        oprot.writeI32(this.httpStatus);
        oprot.writeFieldEnd();
        if (this.data != null) {
            oprot.writeFieldBegin(DATA_FIELD_DESC);
            {
                oprot.writeListBegin(new TList(TType.STRING, this.data.size()));
                for (String _iter38 : this.data) {
                    oprot.writeString(_iter38);
                }
                oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.errors != null) {
            oprot.writeFieldBegin(ERRORS_FIELD_DESC);
            {
                oprot.writeListBegin(new TList(TType.STRING, this.errors.size()));
                for (String _iter39 : this.errors) {
                    oprot.writeString(_iter39);
                }
                oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.attributes != null) {
            oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.size()));
                for (Map.Entry<String, String> _iter40 : this.attributes.entrySet()) {
                    oprot.writeString(_iter40.getKey());
                    oprot.writeString(_iter40.getValue());
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.headers != null) {
            oprot.writeFieldBegin(HEADERS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.headers.size()));
                for (Map.Entry<String, String> _iter41 : this.headers.entrySet()) {
                    oprot.writeString(_iter41.getKey());
                    oprot.writeString(_iter41.getValue());
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RemoteInternalResponse(");
        boolean first = true;

        sb.append("redirectTo:");
        if (this.redirectTo == null) {
            sb.append("null");
        } else {
            sb.append(this.redirectTo);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("cookies:");
        if (this.cookies == null) {
            sb.append("null");
        } else {
            sb.append(this.cookies);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("httpStatus:");
        sb.append(this.httpStatus);
        first = false;
        if (!first) sb.append(", ");
        sb.append("data:");
        if (this.data == null) {
            sb.append("null");
        } else {
            sb.append(this.data);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("errors:");
        if (this.errors == null) {
            sb.append("null");
        } else {
            sb.append(this.errors);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("attributes:");
        if (this.attributes == null) {
            sb.append("null");
        } else {
            sb.append(this.attributes);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("headers:");
        if (this.headers == null) {
            sb.append("null");
        } else {
            sb.append(this.headers);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

