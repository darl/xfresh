/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package ru.darlz.ff.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.MapMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

public class RemoteInternalRequest implements TBase<RemoteInternalRequest, RemoteInternalRequest._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("RemoteInternalRequest");

    private static final TField REAL_PATH_FIELD_DESC = new TField("realPath", TType.STRING, (short) 1);
    private static final TField NEED_TRANSFORM_FIELD_DESC = new TField("needTransform", TType.BOOL, (short) 2);
    private static final TField COOKIES_FIELD_DESC = new TField("cookies", TType.MAP, (short) 3);
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.MAP, (short) 4);
    private static final TField REQUEST_URL_FIELD_DESC = new TField("requestUrl", TType.STRING, (short) 5);
    private static final TField QUERY_STRING_FIELD_DESC = new TField("queryString", TType.STRING, (short) 6);
    private static final TField REMOTE_ADDR_FIELD_DESC = new TField("remoteAddr", TType.STRING, (short) 7);
    private static final TField HEADERS_FIELD_DESC = new TField("headers", TType.MAP, (short) 8);
    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short) 9);

    public String realPath;
    public boolean needTransform;
    public Map<String, String> cookies;
    public Map<String, List<String>> parameters;
    public String requestUrl;
    public String queryString;
    public String remoteAddr;
    public Map<String, String> headers;
    public long userId;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        REAL_PATH((short) 1, "realPath"),
        NEED_TRANSFORM((short) 2, "needTransform"),
        COOKIES((short) 3, "cookies"),
        PARAMETERS((short) 4, "parameters"),
        REQUEST_URL((short) 5, "requestUrl"),
        QUERY_STRING((short) 6, "queryString"),
        REMOTE_ADDR((short) 7, "remoteAddr"),
        HEADERS((short) 8, "headers"),
        USER_ID((short) 9, "userId");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // REAL_PATH
                    return REAL_PATH;
                case 2: // NEED_TRANSFORM
                    return NEED_TRANSFORM;
                case 3: // COOKIES
                    return COOKIES;
                case 4: // PARAMETERS
                    return PARAMETERS;
                case 5: // REQUEST_URL
                    return REQUEST_URL;
                case 6: // QUERY_STRING
                    return QUERY_STRING;
                case 7: // REMOTE_ADDR
                    return REMOTE_ADDR;
                case 8: // HEADERS
                    return HEADERS;
                case 9: // USER_ID
                    return USER_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __NEEDTRANSFORM_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap;

    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.REAL_PATH, new FieldMetaData("realPath", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.NEED_TRANSFORM, new FieldMetaData("needTransform", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.BOOL)));
        tmpMap.put(_Fields.COOKIES, new FieldMetaData("cookies", TFieldRequirementType.DEFAULT,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new FieldValueMetaData(TType.STRING))));
        tmpMap.put(_Fields.PARAMETERS, new FieldMetaData("parameters", TFieldRequirementType.DEFAULT,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new ListMetaData(TType.LIST,
                                new FieldValueMetaData(TType.STRING)))));
        tmpMap.put(_Fields.REQUEST_URL, new FieldMetaData("requestUrl", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.QUERY_STRING, new FieldMetaData("queryString", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.REMOTE_ADDR, new FieldMetaData("remoteAddr", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING)));
        tmpMap.put(_Fields.HEADERS, new FieldMetaData("headers", TFieldRequirementType.DEFAULT,
                new MapMetaData(TType.MAP,
                        new FieldValueMetaData(TType.STRING),
                        new FieldValueMetaData(TType.STRING))));
        tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(RemoteInternalRequest.class, metaDataMap);
    }

    public RemoteInternalRequest() {
    }

    public RemoteInternalRequest(
            String realPath,
            boolean needTransform,
            Map<String, String> cookies,
            Map<String, List<String>> parameters,
            String requestUrl,
            String queryString,
            String remoteAddr,
            Map<String, String> headers,
            long userId) {
        this();
        this.realPath = realPath;
        this.needTransform = needTransform;
        setNeedTransformIsSet(true);
        this.cookies = cookies;
        this.parameters = parameters;
        this.requestUrl = requestUrl;
        this.queryString = queryString;
        this.remoteAddr = remoteAddr;
        this.headers = headers;
        this.userId = userId;
        setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoteInternalRequest(RemoteInternalRequest other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetRealPath()) {
            this.realPath = other.realPath;
        }
        this.needTransform = other.needTransform;
        if (other.isSetCookies()) {
            Map<String, String> __this__cookies = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.cookies.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__cookies_copy_key = other_element_key;

                String __this__cookies_copy_value = other_element_value;

                __this__cookies.put(__this__cookies_copy_key, __this__cookies_copy_value);
            }
            this.cookies = __this__cookies;
        }
        if (other.isSetParameters()) {
            Map<String, List<String>> __this__parameters = new HashMap<String, List<String>>();
            for (Map.Entry<String, List<String>> other_element : other.parameters.entrySet()) {

                String other_element_key = other_element.getKey();
                List<String> other_element_value = other_element.getValue();

                String __this__parameters_copy_key = other_element_key;

                List<String> __this__parameters_copy_value = new ArrayList<String>();
                for (String other_element_value_element : other_element_value) {
                    __this__parameters_copy_value.add(other_element_value_element);
                }

                __this__parameters.put(__this__parameters_copy_key, __this__parameters_copy_value);
            }
            this.parameters = __this__parameters;
        }
        if (other.isSetRequestUrl()) {
            this.requestUrl = other.requestUrl;
        }
        if (other.isSetQueryString()) {
            this.queryString = other.queryString;
        }
        if (other.isSetRemoteAddr()) {
            this.remoteAddr = other.remoteAddr;
        }
        if (other.isSetHeaders()) {
            Map<String, String> __this__headers = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.headers.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__headers_copy_key = other_element_key;

                String __this__headers_copy_value = other_element_value;

                __this__headers.put(__this__headers_copy_key, __this__headers_copy_value);
            }
            this.headers = __this__headers;
        }
        this.userId = other.userId;
    }

    public RemoteInternalRequest deepCopy() {
        return new RemoteInternalRequest(this);
    }

    @Override
    public void clear() {
        this.realPath = null;
        setNeedTransformIsSet(false);
        this.needTransform = false;
        this.cookies = null;
        this.parameters = null;
        this.requestUrl = null;
        this.queryString = null;
        this.remoteAddr = null;
        this.headers = null;
        setUserIdIsSet(false);
        this.userId = 0;
    }

    public String getRealPath() {
        return this.realPath;
    }

    public RemoteInternalRequest setRealPath(String realPath) {
        this.realPath = realPath;
        return this;
    }

    public void unsetRealPath() {
        this.realPath = null;
    }

    /**
     * Returns true if field realPath is set (has been asigned a value) and false otherwise
     */
    public boolean isSetRealPath() {
        return this.realPath != null;
    }

    public void setRealPathIsSet(boolean value) {
        if (!value) {
            this.realPath = null;
        }
    }

    public boolean isNeedTransform() {
        return this.needTransform;
    }

    public RemoteInternalRequest setNeedTransform(boolean needTransform) {
        this.needTransform = needTransform;
        setNeedTransformIsSet(true);
        return this;
    }

    public void unsetNeedTransform() {
        __isset_bit_vector.clear(__NEEDTRANSFORM_ISSET_ID);
    }

    /**
     * Returns true if field needTransform is set (has been asigned a value) and false otherwise
     */
    public boolean isSetNeedTransform() {
        return __isset_bit_vector.get(__NEEDTRANSFORM_ISSET_ID);
    }

    public void setNeedTransformIsSet(boolean value) {
        __isset_bit_vector.set(__NEEDTRANSFORM_ISSET_ID, value);
    }

    public int getCookiesSize() {
        return (this.cookies == null) ? 0 : this.cookies.size();
    }

    public void putToCookies(String key, String val) {
        if (this.cookies == null) {
            this.cookies = new HashMap<String, String>();
        }
        this.cookies.put(key, val);
    }

    public Map<String, String> getCookies() {
        return this.cookies;
    }

    public RemoteInternalRequest setCookies(Map<String, String> cookies) {
        this.cookies = cookies;
        return this;
    }

    public void unsetCookies() {
        this.cookies = null;
    }

    /**
     * Returns true if field cookies is set (has been asigned a value) and false otherwise
     */
    public boolean isSetCookies() {
        return this.cookies != null;
    }

    public void setCookiesIsSet(boolean value) {
        if (!value) {
            this.cookies = null;
        }
    }

    public int getParametersSize() {
        return (this.parameters == null) ? 0 : this.parameters.size();
    }

    public void putToParameters(String key, List<String> val) {
        if (this.parameters == null) {
            this.parameters = new HashMap<String, List<String>>();
        }
        this.parameters.put(key, val);
    }

    public Map<String, List<String>> getParameters() {
        return this.parameters;
    }

    public RemoteInternalRequest setParameters(Map<String, List<String>> parameters) {
        this.parameters = parameters;
        return this;
    }

    public void unsetParameters() {
        this.parameters = null;
    }

    /**
     * Returns true if field parameters is set (has been asigned a value) and false otherwise
     */
    public boolean isSetParameters() {
        return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
        if (!value) {
            this.parameters = null;
        }
    }

    public String getRequestUrl() {
        return this.requestUrl;
    }

    public RemoteInternalRequest setRequestUrl(String requestUrl) {
        this.requestUrl = requestUrl;
        return this;
    }

    public void unsetRequestUrl() {
        this.requestUrl = null;
    }

    /**
     * Returns true if field requestUrl is set (has been asigned a value) and false otherwise
     */
    public boolean isSetRequestUrl() {
        return this.requestUrl != null;
    }

    public void setRequestUrlIsSet(boolean value) {
        if (!value) {
            this.requestUrl = null;
        }
    }

    public String getQueryString() {
        return this.queryString;
    }

    public RemoteInternalRequest setQueryString(String queryString) {
        this.queryString = queryString;
        return this;
    }

    public void unsetQueryString() {
        this.queryString = null;
    }

    /**
     * Returns true if field queryString is set (has been asigned a value) and false otherwise
     */
    public boolean isSetQueryString() {
        return this.queryString != null;
    }

    public void setQueryStringIsSet(boolean value) {
        if (!value) {
            this.queryString = null;
        }
    }

    public String getRemoteAddr() {
        return this.remoteAddr;
    }

    public RemoteInternalRequest setRemoteAddr(String remoteAddr) {
        this.remoteAddr = remoteAddr;
        return this;
    }

    public void unsetRemoteAddr() {
        this.remoteAddr = null;
    }

    /**
     * Returns true if field remoteAddr is set (has been asigned a value) and false otherwise
     */
    public boolean isSetRemoteAddr() {
        return this.remoteAddr != null;
    }

    public void setRemoteAddrIsSet(boolean value) {
        if (!value) {
            this.remoteAddr = null;
        }
    }

    public int getHeadersSize() {
        return (this.headers == null) ? 0 : this.headers.size();
    }

    public void putToHeaders(String key, String val) {
        if (this.headers == null) {
            this.headers = new HashMap<String, String>();
        }
        this.headers.put(key, val);
    }

    public Map<String, String> getHeaders() {
        return this.headers;
    }

    public RemoteInternalRequest setHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    public void unsetHeaders() {
        this.headers = null;
    }

    /**
     * Returns true if field headers is set (has been asigned a value) and false otherwise
     */
    public boolean isSetHeaders() {
        return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
        if (!value) {
            this.headers = null;
        }
    }

    public long getUserId() {
        return this.userId;
    }

    public RemoteInternalRequest setUserId(long userId) {
        this.userId = userId;
        setUserIdIsSet(true);
        return this;
    }

    public void unsetUserId() {
        __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /**
     * Returns true if field userId is set (has been asigned a value) and false otherwise
     */
    public boolean isSetUserId() {
        return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
        __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case REAL_PATH:
                if (value == null) {
                    unsetRealPath();
                } else {
                    setRealPath((String) value);
                }
                break;

            case NEED_TRANSFORM:
                if (value == null) {
                    unsetNeedTransform();
                } else {
                    setNeedTransform((Boolean) value);
                }
                break;

            case COOKIES:
                if (value == null) {
                    unsetCookies();
                } else {
                    setCookies((Map<String, String>) value);
                }
                break;

            case PARAMETERS:
                if (value == null) {
                    unsetParameters();
                } else {
                    setParameters((Map<String, List<String>>) value);
                }
                break;

            case REQUEST_URL:
                if (value == null) {
                    unsetRequestUrl();
                } else {
                    setRequestUrl((String) value);
                }
                break;

            case QUERY_STRING:
                if (value == null) {
                    unsetQueryString();
                } else {
                    setQueryString((String) value);
                }
                break;

            case REMOTE_ADDR:
                if (value == null) {
                    unsetRemoteAddr();
                } else {
                    setRemoteAddr((String) value);
                }
                break;

            case HEADERS:
                if (value == null) {
                    unsetHeaders();
                } else {
                    setHeaders((Map<String, String>) value);
                }
                break;

            case USER_ID:
                if (value == null) {
                    unsetUserId();
                } else {
                    setUserId((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case REAL_PATH:
                return getRealPath();

            case NEED_TRANSFORM:
                return new Boolean(isNeedTransform());

            case COOKIES:
                return getCookies();

            case PARAMETERS:
                return getParameters();

            case REQUEST_URL:
                return getRequestUrl();

            case QUERY_STRING:
                return getQueryString();

            case REMOTE_ADDR:
                return getRemoteAddr();

            case HEADERS:
                return getHeaders();

            case USER_ID:
                return new Long(getUserId());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case REAL_PATH:
                return isSetRealPath();
            case NEED_TRANSFORM:
                return isSetNeedTransform();
            case COOKIES:
                return isSetCookies();
            case PARAMETERS:
                return isSetParameters();
            case REQUEST_URL:
                return isSetRequestUrl();
            case QUERY_STRING:
                return isSetQueryString();
            case REMOTE_ADDR:
                return isSetRemoteAddr();
            case HEADERS:
                return isSetHeaders();
            case USER_ID:
                return isSetUserId();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof RemoteInternalRequest)
            return this.equals((RemoteInternalRequest) that);
        return false;
    }

    public boolean equals(RemoteInternalRequest that) {
        if (that == null)
            return false;

        boolean this_present_realPath = true && this.isSetRealPath();
        boolean that_present_realPath = true && that.isSetRealPath();
        if (this_present_realPath || that_present_realPath) {
            if (!(this_present_realPath && that_present_realPath))
                return false;
            if (!this.realPath.equals(that.realPath))
                return false;
        }

        boolean this_present_needTransform = true;
        boolean that_present_needTransform = true;
        if (this_present_needTransform || that_present_needTransform) {
            if (!(this_present_needTransform && that_present_needTransform))
                return false;
            if (this.needTransform != that.needTransform)
                return false;
        }

        boolean this_present_cookies = true && this.isSetCookies();
        boolean that_present_cookies = true && that.isSetCookies();
        if (this_present_cookies || that_present_cookies) {
            if (!(this_present_cookies && that_present_cookies))
                return false;
            if (!this.cookies.equals(that.cookies))
                return false;
        }

        boolean this_present_parameters = true && this.isSetParameters();
        boolean that_present_parameters = true && that.isSetParameters();
        if (this_present_parameters || that_present_parameters) {
            if (!(this_present_parameters && that_present_parameters))
                return false;
            if (!this.parameters.equals(that.parameters))
                return false;
        }

        boolean this_present_requestUrl = true && this.isSetRequestUrl();
        boolean that_present_requestUrl = true && that.isSetRequestUrl();
        if (this_present_requestUrl || that_present_requestUrl) {
            if (!(this_present_requestUrl && that_present_requestUrl))
                return false;
            if (!this.requestUrl.equals(that.requestUrl))
                return false;
        }

        boolean this_present_queryString = true && this.isSetQueryString();
        boolean that_present_queryString = true && that.isSetQueryString();
        if (this_present_queryString || that_present_queryString) {
            if (!(this_present_queryString && that_present_queryString))
                return false;
            if (!this.queryString.equals(that.queryString))
                return false;
        }

        boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
        boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
        if (this_present_remoteAddr || that_present_remoteAddr) {
            if (!(this_present_remoteAddr && that_present_remoteAddr))
                return false;
            if (!this.remoteAddr.equals(that.remoteAddr))
                return false;
        }

        boolean this_present_headers = true && this.isSetHeaders();
        boolean that_present_headers = true && that.isSetHeaders();
        if (this_present_headers || that_present_headers) {
            if (!(this_present_headers && that_present_headers))
                return false;
            if (!this.headers.equals(that.headers))
                return false;
        }

        boolean this_present_userId = true;
        boolean that_present_userId = true;
        if (this_present_userId || that_present_userId) {
            if (!(this_present_userId && that_present_userId))
                return false;
            if (this.userId != that.userId)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(RemoteInternalRequest other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        RemoteInternalRequest typedOther = (RemoteInternalRequest) other;

        lastComparison = Boolean.valueOf(isSetRealPath()).compareTo(typedOther.isSetRealPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRealPath()) {
            lastComparison = TBaseHelper.compareTo(this.realPath, typedOther.realPath);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNeedTransform()).compareTo(typedOther.isSetNeedTransform());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNeedTransform()) {
            lastComparison = TBaseHelper.compareTo(this.needTransform, typedOther.needTransform);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCookies()).compareTo(typedOther.isSetCookies());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCookies()) {
            lastComparison = TBaseHelper.compareTo(this.cookies, typedOther.cookies);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParameters()) {
            lastComparison = TBaseHelper.compareTo(this.parameters, typedOther.parameters);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRequestUrl()).compareTo(typedOther.isSetRequestUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRequestUrl()) {
            lastComparison = TBaseHelper.compareTo(this.requestUrl, typedOther.requestUrl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetQueryString()).compareTo(typedOther.isSetQueryString());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetQueryString()) {
            lastComparison = TBaseHelper.compareTo(this.queryString, typedOther.queryString);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRemoteAddr()).compareTo(typedOther.isSetRemoteAddr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRemoteAddr()) {
            lastComparison = TBaseHelper.compareTo(this.remoteAddr, typedOther.remoteAddr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(typedOther.isSetHeaders());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHeaders()) {
            lastComparison = TBaseHelper.compareTo(this.headers, typedOther.headers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserId()) {
            lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // REAL_PATH
                    if (field.type == TType.STRING) {
                        this.realPath = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // NEED_TRANSFORM
                    if (field.type == TType.BOOL) {
                        this.needTransform = iprot.readBool();
                        setNeedTransformIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COOKIES
                    if (field.type == TType.MAP) {
                        {
                            TMap _map0 = iprot.readMapBegin();
                            this.cookies = new HashMap<String, String>(2 * _map0.size);
                            for (int _i1 = 0; _i1 < _map0.size; ++_i1) {
                                String _key2;
                                String _val3;
                                _key2 = iprot.readString();
                                _val3 = iprot.readString();
                                this.cookies.put(_key2, _val3);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // PARAMETERS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map4 = iprot.readMapBegin();
                            this.parameters = new HashMap<String, List<String>>(2 * _map4.size);
                            for (int _i5 = 0; _i5 < _map4.size; ++_i5) {
                                String _key6;
                                List<String> _val7;
                                _key6 = iprot.readString();
                                {
                                    TList _list8 = iprot.readListBegin();
                                    _val7 = new ArrayList<String>(_list8.size);
                                    for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                                        String _elem10;
                                        _elem10 = iprot.readString();
                                        _val7.add(_elem10);
                                    }
                                    iprot.readListEnd();
                                }
                                this.parameters.put(_key6, _val7);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // REQUEST_URL
                    if (field.type == TType.STRING) {
                        this.requestUrl = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 6: // QUERY_STRING
                    if (field.type == TType.STRING) {
                        this.queryString = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 7: // REMOTE_ADDR
                    if (field.type == TType.STRING) {
                        this.remoteAddr = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 8: // HEADERS
                    if (field.type == TType.MAP) {
                        {
                            TMap _map11 = iprot.readMapBegin();
                            this.headers = new HashMap<String, String>(2 * _map11.size);
                            for (int _i12 = 0; _i12 < _map11.size; ++_i12) {
                                String _key13;
                                String _val14;
                                _key13 = iprot.readString();
                                _val14 = iprot.readString();
                                this.headers.put(_key13, _val14);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 9: // USER_ID
                    if (field.type == TType.I64) {
                        this.userId = iprot.readI64();
                        setUserIdIsSet(true);
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(TProtocol oprot) throws TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.realPath != null) {
            oprot.writeFieldBegin(REAL_PATH_FIELD_DESC);
            oprot.writeString(this.realPath);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEED_TRANSFORM_FIELD_DESC);
        oprot.writeBool(this.needTransform);
        oprot.writeFieldEnd();
        if (this.cookies != null) {
            oprot.writeFieldBegin(COOKIES_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.cookies.size()));
                for (Map.Entry<String, String> _iter15 : this.cookies.entrySet()) {
                    oprot.writeString(_iter15.getKey());
                    oprot.writeString(_iter15.getValue());
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.parameters != null) {
            oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.parameters.size()));
                for (Map.Entry<String, List<String>> _iter16 : this.parameters.entrySet()) {
                    oprot.writeString(_iter16.getKey());
                    {
                        oprot.writeListBegin(new TList(TType.STRING, _iter16.getValue().size()));
                        for (String _iter17 : _iter16.getValue()) {
                            oprot.writeString(_iter17);
                        }
                        oprot.writeListEnd();
                    }
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if (this.requestUrl != null) {
            oprot.writeFieldBegin(REQUEST_URL_FIELD_DESC);
            oprot.writeString(this.requestUrl);
            oprot.writeFieldEnd();
        }
        if (this.queryString != null) {
            oprot.writeFieldBegin(QUERY_STRING_FIELD_DESC);
            oprot.writeString(this.queryString);
            oprot.writeFieldEnd();
        }
        if (this.remoteAddr != null) {
            oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
            oprot.writeString(this.remoteAddr);
            oprot.writeFieldEnd();
        }
        if (this.headers != null) {
            oprot.writeFieldBegin(HEADERS_FIELD_DESC);
            {
                oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.headers.size()));
                for (Map.Entry<String, String> _iter18 : this.headers.entrySet()) {
                    oprot.writeString(_iter18.getKey());
                    oprot.writeString(_iter18.getValue());
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(this.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RemoteInternalRequest(");
        boolean first = true;

        sb.append("realPath:");
        if (this.realPath == null) {
            sb.append("null");
        } else {
            sb.append(this.realPath);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("needTransform:");
        sb.append(this.needTransform);
        first = false;
        if (!first) sb.append(", ");
        sb.append("cookies:");
        if (this.cookies == null) {
            sb.append("null");
        } else {
            sb.append(this.cookies);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("parameters:");
        if (this.parameters == null) {
            sb.append("null");
        } else {
            sb.append(this.parameters);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("requestUrl:");
        if (this.requestUrl == null) {
            sb.append("null");
        } else {
            sb.append(this.requestUrl);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("queryString:");
        if (this.queryString == null) {
            sb.append("null");
        } else {
            sb.append(this.queryString);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("remoteAddr:");
        if (this.remoteAddr == null) {
            sb.append("null");
        } else {
            sb.append(this.remoteAddr);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("headers:");
        if (this.headers == null) {
            sb.append("null");
        } else {
            sb.append(this.headers);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("userId:");
        sb.append(this.userId);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
    }

}

